/* empty css                         */
import { k as createComponent, l as renderTemplate, m as renderComponent, n as maybeRenderHead, o as renderSlot, p as createAstro, q as defineScriptVars, s as addAttribute } from './astro/server_BWQdw0gc.mjs';
import 'kleur/colors';
import { $ as $$Header, a as $$Layout } from './Header_WfgkCO_a.mjs';
import { $ as $$Footer } from './Footer_0UX-Omiu.mjs';
import { $ as $$LinkButton } from './LinkButton_B2Dh1wFB.mjs';
/* empty css                         */

var __freeze$1 = Object.freeze;
var __defProp$1 = Object.defineProperty;
var __template$1 = (cooked, raw) => __freeze$1(__defProp$1(cooked, "raw", { value: __freeze$1(cooked.slice()) }));
var _a$1;
const $$ChapterLayout = createComponent(($$result, $$props, $$slots) => {
  return renderTemplate(_a$1 || (_a$1 = __template$1(["", ' <script>\n  let isScrolling;\n\n  function updateScrollProgress() {\n    const winScroll =\n      document.body.scrollTop || document.documentElement.scrollTop;\n    const height =\n      document.documentElement.scrollHeight -\n      document.documentElement.clientHeight;\n    const scrolled = (winScroll / height) * 100;\n    const myBar = document.getElementById("myBar");\n    if (myBar && typeof myBar.style.width === "string") {\n      myBar.style.width = scrolled + "%";\n    }\n  }\n\n  function handleScroll() {\n    const goToTopButton = document.getElementById("goToTop");\n    const goToBottomButton = document.getElementById("goToBottom");\n\n    if (goToTopButton && goToBottomButton) {\n      goToTopButton.style.display = "none";\n      goToBottomButton.style.display = "none";\n    }\n\n    window.clearTimeout(isScrolling);\n\n    isScrolling = setTimeout(function () {\n      if (goToTopButton && goToBottomButton) {\n        goToTopButton.style.display = "block";\n        goToBottomButton.style.display = "block";\n      }\n    }, 250);\n  }\n\n  function initializeButtons() {\n    const goToTopButton = document.getElementById("goToTop");\n    const goToBottomButton = document.getElementById("goToBottom");\n\n    if (goToTopButton instanceof HTMLElement) {\n      goToTopButton.addEventListener("click", () => {\n        window.scrollTo({ top: 0, behavior: "smooth" });\n      });\n    }\n\n    if (goToBottomButton instanceof HTMLElement) {\n      goToBottomButton.addEventListener("click", () => {\n        window.scrollTo({\n          top: document.documentElement.scrollHeight,\n          behavior: "smooth",\n        });\n      });\n    }\n  }\n\n  initializeButtons();\n  document.addEventListener("astro:after-swap", () => {\n    initializeButtons();\n    updateScrollProgress();\n  });\n\n  document.addEventListener("scroll", () => {\n    updateScrollProgress();\n    handleScroll();\n  });\n<\/script>'])), renderComponent($$result, "Layout", $$Layout, {}, { "default": ($$result2) => renderTemplate` ${renderComponent($$result2, "Header", $$Header, { "activeNav": "novels" })} ${maybeRenderHead()}<div class="progress-container fixed left-0 top-0 z-10 h-1 w-full bg-skin-fill"> <div class="progress-bar h-1 w-0 bg-skin-accent" id="myBar"></div> </div> <main class="mx-auto w-full max-w-3xl px-4 pb-8"> <div class="mx-auto flex w-full max-w-3xl justify-start"> ${renderSlot($$result2, $$slots["default"])} </div> </main> <div class="z-9999 fixed bottom-16 right-4 flex flex-col space-y-2 sm:bottom-32"> <button id="goToTop" class="rounded-full bg-skin-fill p-2 opacity-50 shadow-lg transition-opacity" aria-label="Go to top"> <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 10l7-7m0 0l7 7m-7-7v18"></path> </svg> </button> <button id="goToBottom" class="rounded-full bg-skin-fill p-2 opacity-50 shadow-lg transition-opacity" aria-label="Go to bottom"> <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3"></path> </svg> </button> </div> ${renderComponent($$result2, "Footer", $$Footer, {})} ` }));
}, "/Users/thean/Desktop/Coding/webtales-frontend/src/layouts/ChapterLayout.astro", void 0);

var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
var _a;
const $$Astro = createAstro("https://webtales-eight.vercel.app");
const $$Index = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Index;
  const { id, number } = Astro2.params;
  const API_URL = "http://128.199.208.160:8080";
  const getChapterData = async (id2, chapterNumber) => {
    const res = await fetch(`${API_URL}/novels/${id2}/chapter/${chapterNumber}`);
    if (!res.ok) {
      return null;
    }
    return await res.json();
  };
  const getChapterStats = async (id2) => {
    const res = await fetch(`${API_URL}/novels/chapters-stats/${id2}`);
    if (!res.ok) {
      return null;
    }
    return await res.json();
  };
  const chapter = await getChapterData(id, number);
  const chapterStats = await getChapterStats(id);
  if (!chapter || !chapterStats) {
    return Astro2.redirect("/error");
  }
  const currentChapter = parseInt(number);
  const totalChapters = chapterStats.total_chapters;
  const paragraphs = chapter.translated_content.split("\n\n").filter((p) => p.trim() !== "");
  const prevChapter = currentChapter > 1 ? currentChapter - 1 : null;
  const nextChapter = currentChapter < totalChapters ? currentChapter + 1 : null;
  const prevChapterUrl = prevChapter ? `/novel/${id}/chapter/${prevChapter}/` : null;
  const nextChapterUrl = nextChapter ? `/novel/${id}/chapter/${nextChapter}/` : null;
  return renderTemplate`${renderComponent($$result, "ChapterLayout", $$ChapterLayout, {}, { "default": ($$result2) => renderTemplate(_a || (_a = __template([" ", '<div class="container mx-auto max-w-3xl sm:py-8"> <div class="flex items-center justify-between sm:mb-6"> <a', ` class="flex items-center py-3 text-center font-bold hover:text-skin-accent sm:my-0 sm:py-1 sm:text-xl"> <svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path fill="currentColor" fill-rule="evenodd" d="M10 19.438L8.955 20.5l-7.666-7.79a1.02 1.02 0 0 1 0-1.42L8.955 3.5L10 4.563L2.682 12z"></path></svg>
Back to Novel
</a> </div> <div class="settings-panel mb-6"> <button id="toggleSettings" class="flex transform items-center justify-center rounded-full bg-skin-card px-4 py-2 text-center shadow-2xl transition duration-300 ease-in-out hover:scale-105 hover:bg-skin-card-muted"> <svg xmlns="http://www.w3.org/2000/svg" class="inline-block h-5 w-5 sm:mr-2" viewBox="0 0 20 20" fill="currentColor"> <path fill-rule="evenodd" d="M11.49 3.17c-.38-1.56-2.6-1.56-2.98 0a1.532 1.532 0 01-2.286.948c-1.372-.836-2.942.734-2.106 2.106.54.886.061 2.042-.947 2.287-1.561.379-1.561 2.6 0 2.978a1.532 1.532 0 01.947 2.287c-.836 1.372.734 2.942 2.106 2.106a1.532 1.532 0 012.287.947c.379 1.561 2.6 1.561 2.978 0a1.533 1.533 0 012.287-.947c1.372.836 2.942-.734 2.106-2.106a1.533 1.533 0 01.947-2.287c1.561-.379 1.561-2.6 0-2.978a1.532 1.532 0 01-.947-2.287c.836-1.372-.734-2.942-2.106-2.106a1.532 1.532 0 01-2.287-.947zM10 13a3 3 0 100-6 3 3 0 000 6z" clip-rule="evenodd"></path> </svg> <p class="hidden sm:block">Settings</p> </button> <div id="settingsMenu" class="mt-4 hidden rounded-lg bg-skin-card p-6 shadow-lg"> <h3 class="mb-4 text-lg font-semibold">Reading Preferences</h3> <div class="mb-4"> <label for="fontSize" class="mb-2 block">Font Size: <span id="fontSizeValue">16px</span></label> <input type="range" id="fontSize" min="12" max="24" value="16" class="accent-skin-accent w-full"> </div> <div> <label for="fontFamily" class="mb-2 block">Font Family:</label> <select id="fontFamily" class="w-full rounded border border-skin-line bg-skin-fill p-2"> <option value="'IBM Plex Mono', monospace">IBM Plex Mono</option> <option value="'Roboto', sans-serif">Roboto</option> <option value="'Open Sans', sans-serif">Open Sans</option> <option value="'Lato', sans-serif">Lato</option> <option value="'Merriweather', serif">Merriweather</option> <option value="'Source Sans Pro', sans-serif">Source Sans Pro</option> <option value="'Nunito', sans-serif">Nunito</option> <option value="'Ubuntu', sans-serif">Ubuntu</option> <option value="'Fira Sans', sans-serif">Fira Sans</option> <option value="'Noto Sans', sans-serif">Noto Sans</option> </select> </div> </div> </div> <h1 class="mb-6 text-xl font-bold sm:text-3xl"> `, ' </h1> <div class="my-8 flex items-center justify-between"> ', ' <span class="text-gray-400 max-sm:hidden">\nChapter ', " of ", " </span> ", ' </div> <div class="chapter-content mb-8 space-y-4"> ', ' </div> <div class="flex items-center justify-center pt-8 sm:hidden"> <span class="text-gray-400">\nChapter ', " of ", ' </span> </div> <div class="mt-8 flex items-center justify-between"> ', ' <span class="text-gray-400 max-sm:hidden">\nChapter ', " of ", " </span> ", " </div> </div> <script>(function(){", '\n    function handleKeyPress(event) {\n      if (event.key === "ArrowLeft" && prevChapterUrl) {\n        window.location.href = prevChapterUrl;\n      } else if (event.key === "ArrowRight" && nextChapterUrl) {\n        window.location.href = nextChapterUrl;\n      }\n    }\n\n    const debounce = (func, delay) => {\n      let timeoutId;\n      return (...args) => {\n        clearTimeout(timeoutId);\n        timeoutId = setTimeout(() => func(...args), delay);\n      };\n    };\n\n    const updateStyles = debounce(() => {\n      const fontSize = document.getElementById("fontSize").value;\n      const fontFamily = document.getElementById("fontFamily").value;\n      document.documentElement.style.setProperty(\n        "--font-size",\n        `${fontSize}px`\n      );\n      document.documentElement.style.setProperty("--font-family", fontFamily);\n      document.getElementById("fontSizeValue").textContent = `${fontSize}px`;\n\n      localStorage.setItem("readerFontSize", fontSize);\n      localStorage.setItem("readerFontFamily", fontFamily);\n\n      if (fontFamily !== "\'IBM Plex Mono\', monospace") {\n        const fontName = fontFamily.split(",")[0].replace(/\'/g, "");\n        const link = document.createElement("link");\n        link.href = `https://fonts.googleapis.com/css2?family=${fontName.replace(" ", "+")}&display=swap`;\n        link.rel = "stylesheet";\n        document.head.appendChild(link);\n      }\n    }, 300);\n\n    function loadPreferences() {\n      const fontSize = localStorage.getItem("readerFontSize") || "16";\n      const fontFamily =\n        localStorage.getItem("readerFontFamily") ||\n        "\'IBM Plex Mono\', monospace";\n\n      document.getElementById("fontSize").value = fontSize;\n      document.getElementById("fontFamily").value = fontFamily;\n\n      updateStyles();\n    }\n\n    document.getElementById("fontSize").addEventListener("input", updateStyles);\n    document\n      .getElementById("fontFamily")\n      .addEventListener("change", updateStyles);\n\n    document.getElementById("toggleSettings").addEventListener("click", () => {\n      const settingsMenu = document.getElementById("settingsMenu");\n      settingsMenu.classList.toggle("hidden");\n    });\n\n    // Load preferences when the page loads\n    loadPreferences();\n\n    document.addEventListener("keydown", handleKeyPress);\n\n    document.addEventListener("astro:before-swap", () => {\n      document.removeEventListener("keydown", handleKeyPress);\n    });\n  })();</script> '], [" ", '<div class="container mx-auto max-w-3xl sm:py-8"> <div class="flex items-center justify-between sm:mb-6"> <a', ` class="flex items-center py-3 text-center font-bold hover:text-skin-accent sm:my-0 sm:py-1 sm:text-xl"> <svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path fill="currentColor" fill-rule="evenodd" d="M10 19.438L8.955 20.5l-7.666-7.79a1.02 1.02 0 0 1 0-1.42L8.955 3.5L10 4.563L2.682 12z"></path></svg>
Back to Novel
</a> </div> <div class="settings-panel mb-6"> <button id="toggleSettings" class="flex transform items-center justify-center rounded-full bg-skin-card px-4 py-2 text-center shadow-2xl transition duration-300 ease-in-out hover:scale-105 hover:bg-skin-card-muted"> <svg xmlns="http://www.w3.org/2000/svg" class="inline-block h-5 w-5 sm:mr-2" viewBox="0 0 20 20" fill="currentColor"> <path fill-rule="evenodd" d="M11.49 3.17c-.38-1.56-2.6-1.56-2.98 0a1.532 1.532 0 01-2.286.948c-1.372-.836-2.942.734-2.106 2.106.54.886.061 2.042-.947 2.287-1.561.379-1.561 2.6 0 2.978a1.532 1.532 0 01.947 2.287c-.836 1.372.734 2.942 2.106 2.106a1.532 1.532 0 012.287.947c.379 1.561 2.6 1.561 2.978 0a1.533 1.533 0 012.287-.947c1.372.836 2.942-.734 2.106-2.106a1.533 1.533 0 01.947-2.287c1.561-.379 1.561-2.6 0-2.978a1.532 1.532 0 01-.947-2.287c.836-1.372-.734-2.942-2.106-2.106a1.532 1.532 0 01-2.287-.947zM10 13a3 3 0 100-6 3 3 0 000 6z" clip-rule="evenodd"></path> </svg> <p class="hidden sm:block">Settings</p> </button> <div id="settingsMenu" class="mt-4 hidden rounded-lg bg-skin-card p-6 shadow-lg"> <h3 class="mb-4 text-lg font-semibold">Reading Preferences</h3> <div class="mb-4"> <label for="fontSize" class="mb-2 block">Font Size: <span id="fontSizeValue">16px</span></label> <input type="range" id="fontSize" min="12" max="24" value="16" class="accent-skin-accent w-full"> </div> <div> <label for="fontFamily" class="mb-2 block">Font Family:</label> <select id="fontFamily" class="w-full rounded border border-skin-line bg-skin-fill p-2"> <option value="'IBM Plex Mono', monospace">IBM Plex Mono</option> <option value="'Roboto', sans-serif">Roboto</option> <option value="'Open Sans', sans-serif">Open Sans</option> <option value="'Lato', sans-serif">Lato</option> <option value="'Merriweather', serif">Merriweather</option> <option value="'Source Sans Pro', sans-serif">Source Sans Pro</option> <option value="'Nunito', sans-serif">Nunito</option> <option value="'Ubuntu', sans-serif">Ubuntu</option> <option value="'Fira Sans', sans-serif">Fira Sans</option> <option value="'Noto Sans', sans-serif">Noto Sans</option> </select> </div> </div> </div> <h1 class="mb-6 text-xl font-bold sm:text-3xl"> `, ' </h1> <div class="my-8 flex items-center justify-between"> ', ' <span class="text-gray-400 max-sm:hidden">\nChapter ', " of ", " </span> ", ' </div> <div class="chapter-content mb-8 space-y-4"> ', ' </div> <div class="flex items-center justify-center pt-8 sm:hidden"> <span class="text-gray-400">\nChapter ', " of ", ' </span> </div> <div class="mt-8 flex items-center justify-between"> ', ' <span class="text-gray-400 max-sm:hidden">\nChapter ', " of ", " </span> ", " </div> </div> <script>(function(){", '\n    function handleKeyPress(event) {\n      if (event.key === "ArrowLeft" && prevChapterUrl) {\n        window.location.href = prevChapterUrl;\n      } else if (event.key === "ArrowRight" && nextChapterUrl) {\n        window.location.href = nextChapterUrl;\n      }\n    }\n\n    const debounce = (func, delay) => {\n      let timeoutId;\n      return (...args) => {\n        clearTimeout(timeoutId);\n        timeoutId = setTimeout(() => func(...args), delay);\n      };\n    };\n\n    const updateStyles = debounce(() => {\n      const fontSize = document.getElementById("fontSize").value;\n      const fontFamily = document.getElementById("fontFamily").value;\n      document.documentElement.style.setProperty(\n        "--font-size",\n        \\`\\${fontSize}px\\`\n      );\n      document.documentElement.style.setProperty("--font-family", fontFamily);\n      document.getElementById("fontSizeValue").textContent = \\`\\${fontSize}px\\`;\n\n      localStorage.setItem("readerFontSize", fontSize);\n      localStorage.setItem("readerFontFamily", fontFamily);\n\n      if (fontFamily !== "\'IBM Plex Mono\', monospace") {\n        const fontName = fontFamily.split(",")[0].replace(/\'/g, "");\n        const link = document.createElement("link");\n        link.href = \\`https://fonts.googleapis.com/css2?family=\\${fontName.replace(" ", "+")}&display=swap\\`;\n        link.rel = "stylesheet";\n        document.head.appendChild(link);\n      }\n    }, 300);\n\n    function loadPreferences() {\n      const fontSize = localStorage.getItem("readerFontSize") || "16";\n      const fontFamily =\n        localStorage.getItem("readerFontFamily") ||\n        "\'IBM Plex Mono\', monospace";\n\n      document.getElementById("fontSize").value = fontSize;\n      document.getElementById("fontFamily").value = fontFamily;\n\n      updateStyles();\n    }\n\n    document.getElementById("fontSize").addEventListener("input", updateStyles);\n    document\n      .getElementById("fontFamily")\n      .addEventListener("change", updateStyles);\n\n    document.getElementById("toggleSettings").addEventListener("click", () => {\n      const settingsMenu = document.getElementById("settingsMenu");\n      settingsMenu.classList.toggle("hidden");\n    });\n\n    // Load preferences when the page loads\n    loadPreferences();\n\n    document.addEventListener("keydown", handleKeyPress);\n\n    document.addEventListener("astro:before-swap", () => {\n      document.removeEventListener("keydown", handleKeyPress);\n    });\n  })();</script> '])), maybeRenderHead(), addAttribute(`/novel/${id}/`, "href"), chapter.translated_title, renderComponent($$result2, "LinkButton", $$LinkButton, { "href": prevChapterUrl || "#", "className": "rounded border px-2 py-2 text-sm font-bold hover:border-skin-line sm:px-4 sm:text-base", "disabled": !prevChapter, "ariaLabel": prevChapter ? "Go to previous chapter" : "No previous chapter" }, { "default": ($$result3) => renderTemplate`${prevChapter ? renderTemplate`<span>Previous Chapter</span>` : renderTemplate`<span>First Chapter</span>`}` }), currentChapter, totalChapters, renderComponent($$result2, "LinkButton", $$LinkButton, { "href": nextChapterUrl || "#", "className": "rounded border px-2 py-2 text-sm font-bold hover:border-skin-line sm:px-4 sm:text-base", "disabled": !nextChapter, "ariaLabel": nextChapter ? "Go to next chapter" : "No next chapter" }, { "default": ($$result3) => renderTemplate`${nextChapter ? renderTemplate`<span>Next Chapter</span>` : renderTemplate`<span>Last Chapter</span>`}` }), paragraphs.map((paragraph) => renderTemplate`<p class="overflow-x-hidden text-pretty leading-relaxed"> ${paragraph} </p>`), currentChapter, totalChapters, renderComponent($$result2, "LinkButton", $$LinkButton, { "href": prevChapterUrl || "#", "className": "rounded border px-2 py-2 text-sm font-bold hover:border-skin-line sm:px-4 sm:text-base", "disabled": !prevChapter, "ariaLabel": prevChapter ? "Go to previous chapter" : "No previous chapter" }, { "default": ($$result3) => renderTemplate`${prevChapter ? renderTemplate`<span>Previous Chapter</span>` : renderTemplate`<span>First Chapter</span>`}` }), currentChapter, totalChapters, renderComponent($$result2, "LinkButton", $$LinkButton, { "href": nextChapterUrl || "#", "className": "rounded border px-2 py-2 text-sm font-bold hover:border-skin-line sm:px-4 sm:text-base", "disabled": !nextChapter, "ariaLabel": nextChapter ? "Go to next chapter" : "No next chapter" }, { "default": ($$result3) => renderTemplate`${nextChapter ? renderTemplate`<span>Next Chapter</span>` : renderTemplate`<span>Last Chapter</span>`}` }), defineScriptVars({ prevChapterUrl, nextChapterUrl })) })} `;
}, "/Users/thean/Desktop/Coding/webtales-frontend/src/pages/novel/[id]/chapter/[number]/index.astro", void 0);
const $$file = "/Users/thean/Desktop/Coding/webtales-frontend/src/pages/novel/[id]/chapter/[number]/index.astro";
const $$url = "/novel/[id]/chapter/[number]/";

export { $$Index as default, $$file as file, $$url as url };
