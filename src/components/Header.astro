---
import Hr from "./Hr.astro";

export interface Props {
  activeNav?: "novels" | "bookmark" | "account" | "search";
}

const { activeNav } = Astro.props;

const navItems = [
  { href: "/", label: "Novels" },
  // { href: "/bookmark/", label: "Bookmark" },
  // { href: "/acccount/", label: "Account" },
  { href: "/search/", label: "Search", icon: true },
];
---

<header>
  <div
    class="mx-auto flex max-w-3xl flex-col items-center justify-between sm:flex-row"
  >
    <div
      class="relative flex w-full items-start justify-between p-4 sm:items-center sm:py-8"
    >
      <a href="/" class="absolute py-1 text-xl font-bold sm:static sm:text-3xl"
        >WebTales</a
      >
      <nav
        id="nav-menu"
        class="flex w-full flex-col items-center sm:ml-2 sm:flex-row sm:justify-end sm:space-x-4 sm:py-0"
      >
        <button
          class="hamburger-menu self-end p-2 focus:outline-none sm:hidden"
          aria-label="Open Menu"
          aria-expanded="false"
          aria-controls="menu-items"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="1.5"
            stroke-linecap="round"
            stroke-linejoin="round"
            class="menu-icon"
          >
            <line x1="7" y1="12" x2="21" y2="12" class="line"></line>
            <line x1="3" y1="6" x2="21" y2="6" class="line"></line>
            <line x1="12" y1="18" x2="21" y2="18" class="line"></line>
            <line x1="18" y1="6" x2="6" y2="18" class="close"></line>
            <line x1="6" y1="6" x2="18" y2="18" class="close"></line>
          </svg>
        </button>
        <ul
          id="menu-items"
          class="mt-4 grid w-44 grid-cols-1 gap-x-2 gap-y-2 sm:ml-0 sm:mt-0 sm:flex sm:w-auto sm:gap-x-5 sm:gap-y-0"
        >
          {
            navItems.map(item => (
              <li
                class={`col-span-2 flex items-center justify-center ${item.icon ? "col-span-1" : ""}`}
              >
                {item.icon ? (
                  <a
                    href={item.href}
                    class={`p-3 focus:outline-none sm:p-1 ${
                      activeNav === item.label.toLowerCase() ? "active" : ""
                    } flex`}
                    title={item.label}
                  >
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      class="h-6 w-6 scale-125 fill-current sm:scale-100"
                    >
                      <path d="M19.023 16.977a35.13 35.13 0 0 1-1.367-1.384c-.372-.378-.596-.653-.596-.653l-2.8-1.337A6.962 6.962 0 0 0 16 9c0-3.859-3.14-7-7-7S2 5.141 2 9s3.14 7 7 7c1.763 0 3.37-.66 4.603-1.739l1.337 2.8s.275.224.653.596c.387.363.896.854 1.384 1.367l1.358 1.392.604.646 2.121-2.121-.646-.604c-.379-.372-.885-.866-1.391-1.36zM9 14c-2.757 0-5-2.243-5-5s2.243-5 5-5 5 2.243 5 5-2.243 5-5 5z" />
                    </svg>
                    <span class="sr-only">{item.label}</span>
                  </a>
                ) : (
                  <a
                    href={item.href}
                    class={`w-full px-4 py-3 text-center font-medium hover:text-skin-accent sm:my-0 sm:px-2 sm:py-1 ${activeNav === item.label.toLowerCase() ? "active" : ""}`}
                  >
                    {item.label}
                  </a>
                )}
              </li>
            ))
          }
        </ul>
      </nav>
    </div>
  </div>
  <Hr />
</header>

<style>
  nav a.active {
    @apply underline decoration-wavy decoration-2 underline-offset-4;
  }
  nav a.active svg {
    @apply fill-skin-accent;
  }

  .menu-icon .close {
    opacity: 0;
  }
  .menu-icon.is-active .line {
    @apply opacity-0;
  }
  .menu-icon.is-active .close {
    @apply opacity-100;
  }
</style>

<script>
  function toggleNav() {
    const menuBtn = document.querySelector(".hamburger-menu");
    const menuIcon = document.querySelector(".menu-icon");
    const menuItems = document.querySelector("#menu-items");

    if (menuBtn && menuIcon && menuItems) {
      menuBtn.setAttribute("aria-expanded", "false");
      menuBtn.setAttribute("aria-label", "Open Menu");
      menuItems.classList.add("hidden");

      menuBtn.addEventListener("click", () => {
        const menuExpanded = menuBtn.getAttribute("aria-expanded") === "true";
        menuIcon.classList.toggle("is-active");
        menuBtn.setAttribute("aria-expanded", menuExpanded ? "false" : "true");
        menuBtn.setAttribute(
          "aria-label",
          menuExpanded ? "Open Menu" : "Close Menu"
        );
        menuItems.classList.toggle("hidden");
      });
    }
  }

  toggleNav();

  document.addEventListener("astro:after-swap", toggleNav);
</script>
