---
import { cn } from "@lib/utils";

interface Props {
  className?: string;
  containerClassName?: string;
}

const { className, containerClassName = true } = Astro.props;
---

<div class={cn("relative p-[2px] group", containerClassName)}>
  <div
    class={cn(
      "absolute inset-0 rounded-3xl z-[1] opacity-60 group-hover:opacity-100 blur-xl transition duration-500",
      "bg-[radial-gradient(circle_farthest-side_at_0_100%,#00ccb1,transparent),radial-gradient(circle_farthest-side_at_100%_0,#7b61ff,transparent),radial-gradient(circle_farthest-side_at_100%_100%,#ffc414,transparent),radial-gradient(circle_farthest-side_at_0_0,#1ca0fb,#141316)]"
    )}
  >
  </div>
  <div
    class={cn(
      "absolute inset-0 rounded-3xl z-[1]",
      "bg-[radial-gradient(circle_farthest-side_at_0_100%,#00ccb1,transparent),radial-gradient(circle_farthest-side_at_100%_0,#7b61ff,transparent),radial-gradient(circle_farthest-side_at_100%_100%,#ffc414,transparent),radial-gradient(circle_farthest-side_at_0_0,#1ca0fb,#141316)]"
    )}
  >
  </div>
  <div class={cn("relative z-10", className)}>
    <slot />
  </div>
</div>

<script>
  import { animate } from "motion";

  function setupAnimation() {
    const gradientElements = document.querySelectorAll('.group > div:not(.z-10)');
    
    gradientElements.forEach((element) => {
      animate(
        element,
        { backgroundPosition: ["0 50%", "100% 50%", "0 50%"] },
        {
          duration: 5,
          repeat: Infinity,
          direction: "alternate",
        }
      );
    });
  }

  // Run the animation setup when the component mounts
  setupAnimation();

  // Re-run the animation setup when the page content updates (for SPAs)
  document.addEventListener('astro:page-load', setupAnimation);
</script>

<style>
  .group > div:not(.z-10) {
    background-size: 400% 400%;
    will-change: transform;
  }
</style>