---
import Layout from "@/layouts/Layout.astro";
import Header from "@/components/Header.astro";

interface Props {
  chapter_title: string;
  novel_name: string;
}

const { chapter_title, novel_name } = Astro.props;
---

<Layout title={novel_name + " | " + chapter_title}>
  <Header activeNav="novels" />
  <div
    class="progress-container fixed left-0 top-0 z-10 h-1 w-full bg-skin-fill"
  >
    <div class="progress-bar h-1 w-0 bg-skin-accent" id="myBar"></div>
  </div>

  <main class="mx-auto w-full max-w-3xl px-4 pb-8">
    <div class="mx-auto flex w-full max-w-3xl justify-start">
      <slot />
    </div>
  </main>
  <div
    class="z-9999 fixed bottom-16 right-4 flex flex-col space-y-2 sm:bottom-32"
  >
    <button
      id="goToTop"
      class="rounded-full bg-skin-fill p-2 opacity-50 shadow-lg transition-opacity"
      aria-label="Go to top"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="h-6 w-6"
        fill="none"
        viewBox="0 0 24 24"
        stroke="currentColor"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M5 10l7-7m0 0l7 7m-7-7v18"></path>
      </svg>
    </button>
    <button
      id="goToBottom"
      class="rounded-full bg-skin-fill p-2 opacity-50 shadow-lg transition-opacity"
      aria-label="Go to bottom"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="h-6 w-6"
        fill="none"
        viewBox="0 0 24 24"
        stroke="currentColor"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M19 14l-7 7m0 0l-7-7m7 7V3"></path>
      </svg>
    </button>
  </div>
</Layout>

<script is:inline>
  let isScrolling;

  function updateScrollProgress() {
    const winScroll =
      document.body.scrollTop || document.documentElement.scrollTop;
    const height =
      document.documentElement.scrollHeight -
      document.documentElement.clientHeight;
    const scrolled = (winScroll / height) * 100;
    const myBar = document.getElementById("myBar");
    if (myBar && typeof myBar.style.width === "string") {
      myBar.style.width = scrolled + "%";
    }
  }

  function handleScroll() {
    const goToTopButton = document.getElementById("goToTop");
    const goToBottomButton = document.getElementById("goToBottom");

    if (goToTopButton && goToBottomButton) {
      goToTopButton.style.display = "none";
      goToBottomButton.style.display = "none";
    }

    window.clearTimeout(isScrolling);

    isScrolling = setTimeout(function () {
      if (goToTopButton && goToBottomButton) {
        goToTopButton.style.display = "block";
        goToBottomButton.style.display = "block";
      }
    }, 800);
  }

  function initializeButtons() {
    const goToTopButton = document.getElementById("goToTop");
    const goToBottomButton = document.getElementById("goToBottom");

    if (goToTopButton instanceof HTMLElement) {
      goToTopButton.addEventListener("click", () => {
        window.scrollTo({ top: 0, behavior: "smooth" });
      });
    }

    if (goToBottomButton instanceof HTMLElement) {
      goToBottomButton.addEventListener("click", () => {
        window.scrollTo({
          top: document.documentElement.scrollHeight,
          behavior: "smooth",
        });
      });
    }
  }

  initializeButtons();
  document.addEventListener("astro:after-swap", () => {
    initializeButtons();
    updateScrollProgress();
  });

  document.addEventListener("scroll", () => {
    updateScrollProgress();
    handleScroll();
  });
</script>
