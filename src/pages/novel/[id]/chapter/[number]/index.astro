---
import ChapterLayout from "@layouts/ChapterLayout.astro";
import LinkButton from "@components/LinkButton.astro";

const { id, number } = Astro.params;
const API_URL = import.meta.env.PUBLIC_API_URL;

const getChapterData = async (id: string | undefined, chapterNumber: string | undefined) => {
  const res = await fetch(`${API_URL}/novels/${id}/chapters/${chapterNumber}`);
  if (!res.ok) {
    return null;
  }
  return await res.json();
};

const getChapterStats = async (id: string | undefined) => {
  const res = await fetch(`${API_URL}/novels/chapters-stats/${id}`);
  if (!res.ok) {
    return null;
  }
  return await res.json();
};

const chapter = await getChapterData(id, number);
const chapterStats = await getChapterStats(id);

if (!chapter || !chapterStats) {
  return Astro.redirect('/error');
}

const currentChapter = parseInt(number as string);
const totalChapters = chapterStats.total_chapters;

const paragraphs = chapter.translated_content.split('\n\n').filter((p: string) => p.trim() !== '');

const prevChapter = currentChapter > 1 ? currentChapter - 1 : null;
const nextChapter = currentChapter < totalChapters ? currentChapter + 1 : null;
---

<ChapterLayout>
  <div class="container mx-auto max-w-3xl py-8">
    <h1 class="text-xl sm:text-3xl font-bold mb-6">{chapter.translated_title}</h1>
    <div class="space-y-4 mb-8">
      {paragraphs.map((paragraph: string) => (
        <p class="sm:text-lg leading-relaxed text-pretty overflow-x-hidden">{paragraph}</p>
      ))}
    </div>

    <div class="sm:hidden flex justify-center items-center pt-8">
      <span class="text-gray-400">
        Chapter {currentChapter} of {totalChapters}
      </span>
    </div>
    
    <div class="flex justify-between items-center mt-8">
      <LinkButton
        href={prevChapter ? `/novel/${id}/chapter/${prevChapter}` : "#"}
        className="font-bold py-2 px-2 sm:px-4 border hover:border-skin-line rounded text-sm sm:text-base"
        disabled={!prevChapter}
        ariaLabel={prevChapter ? "Go to previous chapter" : "No previous chapter"}
      >
        {prevChapter ? (
          <>
            <span >Previous Chapter</span>
          </>
        ) : (
          <span>First Chapter</span>
        )}
      </LinkButton>
      
      <span class="text-gray-400 max-sm:hidden">
        Chapter {currentChapter} of {totalChapters}
      </span>
      
      <LinkButton
        href={nextChapter ? `/novel/${id}/chapter/${nextChapter}` : "#"}
        className="font-bold py-2 px-2 sm:px-4 border hover:border-skin-line rounded text-sm sm:text-base"
        disabled={!nextChapter}
        ariaLabel={nextChapter ? "Go to next chapter" : "No next chapter"}
      >
        {nextChapter ? (
          <>
            <span >Next Chapter</span>
          </>
        ) : (
          <span>Last Chapter</span>
        )}
      </LinkButton>
    </div>
  </div>
</ChapterLayout>

