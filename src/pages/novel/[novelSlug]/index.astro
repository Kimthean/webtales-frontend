---
import Header from "@/components/Header.astro";
import Layout from "@/layouts/Layout.astro";
import { API_URL } from "@/constants/index";
import ChapterSection from "@/components/react/ChapterList";
import { Image } from "astro:assets";
import { getSession } from "auth-astro/server";
import axiosInstance from "@/lib/axios";
import BookmarkButton from "@/components/react/BookmarkButton";
import formatRelativeTime from "@/lib/format-time";
import EpubDownload from "@/components/react/EpubDownload";

const { novelSlug } = Astro.params;

const initialPage = parseInt(Astro.url.searchParams.get("page") || "1");
const pageSize = 100;

const session = await getSession(Astro.request);

const getNovelData = async (novelSlug: string | undefined) => {
  const res = await fetch(`${API_URL}/novel/${novelSlug}`);
  if (!res.ok) {
    return null;
  }
  return await res.json();
};

const getBookmarkStatus = async (id: string | undefined) => {
  if (!session) {
    return null;
  }

  try {
    const res = await axiosInstance.get(`/user/bookmark/${id}`, {
      headers: {
        Authorization: `Bearer ${session.user?.access_token}`,
      },
    });
    return await res.data.bookmarked;
  } catch (error) {
    return error;
  }
};
const novel = await getNovelData(novelSlug);
const bookmarkStatus = await getBookmarkStatus(novel.id);
if (!novel) {
  return Astro.redirect("/404");
}

const novel_description = novel.description
  .split("\n")
  .filter((p: string) => p.trim() !== "");

const title = `${novel.title.replace(/\b\w/g, (char: string) => char.toUpperCase())} | Webtales`;
const description = novel_description.slice(0, 160);

const getUserProgress = async (novelSlug: string | undefined) => {
  if (!session) {
    return null;
  }

  try {
    const res = await axiosInstance.get(`/user/progress/${novelSlug}`, {
      headers: {
        Authorization: `Bearer ${session.user?.access_token}`,
      },
    });
    return await res.data;
  } catch (error) {
    return error;
  }
};

const progress = await getUserProgress(novelSlug);
const lastReadChapter = progress ? progress.chapter_slug : null;
const lastRead = progress ? progress.last_read_at : null;
const firstChapterUrl = `/novel/${novelSlug}/chapter/${novel.first_chapter_slug}`;
const lastReadChapterUrl = lastReadChapter
  ? `/novel/${novelSlug}/chapter/${lastReadChapter}`
  : firstChapterUrl;
---

<Layout title={title} description={description} image={novel.thumbnail}>
  <Header activeNav="novels" />
  <div class="container mx-auto max-w-3xl px-4 py-8">
    <div class="lg:grid-cols-3 grid grid-cols-1 gap-8">
      <div class="lg:col-span-2">
        {
          novel.thumbnail && (
            <Image
              class="mx-auto w-52 max-w-sm rounded-lg object-cover shadow-lg sm:h-auto sm:w-full"
              width={200}
              height={200}
              src={novel.thumbnail}
              alt={novel.title}
            />
          )
        }
        <h1 class="mb-2 mt-6 text-2xl font-bold text-skin-base sm:text-4xl">
          {novel.title.replace(/\b\w/g, (char: string) => char.toUpperCase())}
        </h1>
        <p class="mb-2 sm:text-2xl">
          {
            novel.raw_title.replace(/\b\w/g, (char: string) =>
              char.toUpperCase()
            )
          }
        </p>
        <p class="mb-4 text-lg text-skin-base opacity-80 sm:text-xl">
          Author:{" "}
          {
            novel.author
              .replace(/[_-]/g, " ")
              .split(" ")
              .map(
                (word: string) => word.charAt(0).toUpperCase() + word.slice(1)
              )
              .join(" ")
          }
        </p>
        <div class="flex gap-2 sm:gap-4">
          <a
            href={lastReadChapter ? lastReadChapterUrl : firstChapterUrl}
            class="hover:bg-skin-accent-hover rounded-md bg-skin-accent px-4 py-2 text-center text-xs text-skin-inverted transition sm:px-5 sm:py-2 sm:text-sm"
          >
            {lastReadChapter ? "Continue Reading" : "Start Reading"}
          </a>
          <BookmarkButton
            novelId={novel.id}
            status={bookmarkStatus}
            client:load
          />
        </div>
        <span class="mb-4 mt-2 block text-sm text-skin-base opacity-80">
          {
            lastRead
              ? `Last Read: ${formatRelativeTime(lastRead)}`
              : "Last Read: Never"
          }</span
        >

        <div class="rounded-lg bg-skin-card p-4 shadow-md sm:p-6">
          <h2 class="mb-4 text-xl font-semibold text-skin-base sm:text-2xl">
            Description
          </h2>
          <div
            id="descriptionContainer"
            class="text-sm text-skin-base sm:text-base"
          >
            <div
              id="shortDescription"
              class="overflow-x-hidden text-pretty leading-relaxed"
            >
              {
                novel_description.length === 1 ? (
                  <p>
                    {novel_description[0].length > 150
                      ? novel_description[0].substring(0, 150) + "..."
                      : novel_description[0]}
                  </p>
                ) : (
                  novel_description
                    .slice(0, 3)
                    .map((paragraph: string) => <p>{paragraph}</p>)
                )
              }
            </div>
            <div
              id="fullDescription"
              class="hidden overflow-x-hidden text-pretty leading-relaxed"
            >
              {novel_description.map((paragraph: string) => <p>{paragraph}</p>)}
            </div>
            <button
              id="toggleDescription"
              class="my-2 text-skin-accent hover:underline"
            >
              Read more
            </button>
            <EpubDownload
              novelId={novel.id}
              session={session}
              epub_url={novel.epub_url}
              client:load
            />
          </div>
        </div>
      </div>
      <ChapterSection
        novelSlug={novelSlug}
        pageSize={pageSize}
        initialPage={initialPage}
        client:load
      />
    </div>
  </div>
</Layout>

<style>
  /* Custom scrollbar styles */
  .overflow-y-auto::-webkit-scrollbar {
    width: 6px;
  }

  .overflow-y-auto::-webkit-scrollbar-track {
    background: var(--color-fill);
  }

  .overflow-y-auto::-webkit-scrollbar-thumb {
    background-color: var(--color-accent);
    border-radius: 20px;
  }

  @media (min-width: 640px) {
    .overflow-y-auto::-webkit-scrollbar {
      width: 8px;
    }
  }

  @keyframes fadeIn {
    to {
      opacity: 1;
    }
  }
</style>

<script>
  document.addEventListener("astro:page-load", () => {
    const container = document.getElementById("descriptionContainer");
    if (container) {
      const shortDesc = container.querySelector("#shortDescription");
      const fullDesc = container.querySelector("#fullDescription");
      const toggleBtn = container.querySelector("#toggleDescription");

      if (shortDesc && fullDesc && toggleBtn) {
        toggleBtn.addEventListener("click", () => {
          const isExpanded = shortDesc.classList.contains("hidden");
          shortDesc.classList.toggle("hidden");
          fullDesc.classList.toggle("hidden");
          toggleBtn.textContent = isExpanded ? "Read more" : "Read less";
        });
      }
    }
  });

  document.addEventListener("DOMContentLoaded", () => {
    const generateEpubButton = document.getElementById("generateEpubButton");
    if (generateEpubButton) {
      generateEpubButton.addEventListener("click", async () => {
        const id = generateEpubButton.dataset.id;
        generateEpubButton.textContent = "Generating EPUB...";
        (generateEpubButton as HTMLButtonElement).disabled = true;

        const response = await fetch(`/api/epub?id=${id}`, {
          method: "POST",
        });

        if (response.status === 200) {
          let countdown = 10;
          const interval = setInterval(() => {
            if (countdown > 0) {
              generateEpubButton.textContent = `EPUB is being generated... (${countdown}s)`;
              countdown--;
            } else {
              clearInterval(interval);
              generateEpubButton.textContent =
                "Please refresh the page to download the EPUB";
            }
          }, 1000);
        } else {
          generateEpubButton.textContent = "Failed to generate EPUB";
          (generateEpubButton as HTMLButtonElement).disabled = false;
        }
      });
    }
  });
</script>
