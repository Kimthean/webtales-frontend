---
import ChapterLayout from "@/layouts/ChapterLayout.astro";
import LinkButton from "@/components/LinkButton.astro";
import { API_URL } from "@/constants/index";
import { InfiniteScrollChapter } from "@/components/react/InfiniteScrollChapter";
import { getSession } from "auth-astro/server";

const { novelSlug, chapterSlug } = Astro.params;
const session = await getSession(Astro.request);

const getChapterData = async (
  id: string | undefined,
  chapterNumber: string | undefined
) => {
  const res = await fetch(
    `${API_URL}/novel/${novelSlug}/chapter/${chapterSlug}`
  );
  if (!res.ok) {
    return null;
  }
  return await res.json();
};

const getChapterStats = async (novelSlug: string | undefined) => {
  const res = await fetch(`${API_URL}/novel/chapters-stats/${novelSlug}`);
  if (!res.ok) {
    return null;
  }
  return await res.json();
};

const updateUserProgress = async (
  novelSlug: string | undefined,
  chapterSlug: string | undefined
) => {
  const res = await fetch(
    `${API_URL}/user/progress/${novelSlug}/${chapterSlug}`,
    {
      method: "PUT",
      headers: {
        Authorization: `Bearer ${session?.user?.access_token}`,
      },
    }
  );
  return res.ok;
};

const chapter = await getChapterData(novelSlug, chapterSlug);
const chapterStats = await getChapterStats(novelSlug);
if (session && chapter) {
  await updateUserProgress(novelSlug, chapterSlug);
}

if (!chapter || !chapterStats) {
  return Astro.redirect("/404");
}

const totalChapters = chapterStats.total_chapters;

const paragraphs = chapter.translated_content
  .split("\n\n")
  .filter((p: string) => p.trim() !== "");

const prevChapter = chapter?.prev_chapter_slug;
const nextChapter = chapter.next_chapter_slug;

const prevChapterUrl = prevChapter
  ? `/novel/${novelSlug}/chapter/${prevChapter}`
  : null;
const nextChapterUrl = nextChapter
  ? `/novel/${novelSlug}/chapter/${nextChapter}`
  : null;

const isInfiniteScrollEnabled =
  Astro.cookies.get("autoFetchEnabled")?.value === "true";
---

<ChapterLayout
  novel_name={chapter.novel_title.replace(/\b\w/g, (char: string) =>
    char.toUpperCase()
  )}
  chapter_title={chapter.translated_title}
>
  <div class="mx-auto sm:py-8">
    <div class="flex items-center justify-between sm:mb-6">
      <a
        href={`/novel/${novelSlug}`}
        class="flex items-center py-3 text-center font-bold hover:text-skin-accent sm:my-0 sm:py-1 sm:text-xl"
      >
        <svg
          width="24"
          height="24"
          viewBox="0 0 24 24"
          xmlns="http://www.w3.org/2000/svg"
          ><path
            fill="currentColor"
            fill-rule="evenodd"
            d="M10 19.438L8.955 20.5l-7.666-7.79a1.02 1.02 0 0 1 0-1.42L8.955 3.5L10 4.563L2.682 12z"
          ></path></svg
        >
        Back to Novel
      </a>
    </div>
    <div>
      {
        isInfiniteScrollEnabled ? (
          <InfiniteScrollChapter
            novelSlug={novelSlug!}
            initialChapterSlug={chapter.slug}
            client:only="react"
          />
        ) : (
          <div>
            <h1 class="mb-6 text-xl font-bold sm:text-3xl">
              {chapter.translated_title}
            </h1>
            <div class="my-8 flex items-center justify-between">
              <LinkButton
                href={prevChapterUrl || "#"}
                className="rounded border px-2 py-2 text-sm font-bold hover:border-skin-line sm:px-4 sm:text-base"
                disabled={!prevChapter}
                ariaLabel={
                  prevChapter ? "Go to previous chapter" : "No previous chapter"
                }
              >
                {prevChapter ? (
                  <span>Previous Chapter</span>
                ) : (
                  <span>First Chapter</span>
                )}
              </LinkButton>

              <span class="text-gray-400 max-sm:hidden">
                Chapter {chapter.number} of {totalChapters}
              </span>

              <LinkButton
                href={nextChapterUrl || "#"}
                className="rounded border px-2 py-2 text-sm font-bold hover:border-skin-line sm:px-4 sm:text-base"
                disabled={!nextChapter}
                ariaLabel={
                  nextChapter ? "Go to next chapter" : "No next chapter"
                }
              >
                {nextChapter ? (
                  <span>Next Chapter</span>
                ) : (
                  <span>Last Chapter</span>
                )}
              </LinkButton>
            </div>
            <div class="chapter-content mb-8 space-y-4">
              {paragraphs.map((paragraph: string) => (
                <p class="overflow-x-hidden text-pretty leading-relaxed">
                  {paragraph}
                </p>
              ))}
            </div>
            <div class="flex items-center justify-center pt-8 sm:hidden">
              <span class="text-gray-400">
                Chapter {chapter.number} of {totalChapters}
              </span>
            </div>
            <div class="mt-8 flex items-center justify-between">
              <LinkButton
                href={prevChapterUrl || "#"}
                className="rounded border px-2 py-2 text-sm font-bold hover:border-skin-line sm:px-4 sm:text-base"
                disabled={!prevChapter}
                ariaLabel={
                  prevChapter ? "Go to previous chapter" : "No previous chapter"
                }
              >
                {prevChapter ? (
                  <span>Previous Chapter</span>
                ) : (
                  <span>First Chapter</span>
                )}
              </LinkButton>

              <span class="text-gray-400 max-sm:hidden">
                Chapter {chapter.number} of {totalChapters}
              </span>

              <LinkButton
                href={nextChapterUrl || "#"}
                className="rounded border px-2 py-2 text-sm font-bold hover:border-skin-line sm:px-4 sm:text-base"
                disabled={!nextChapter}
                ariaLabel={
                  nextChapter ? "Go to next chapter" : "No next chapter"
                }
              >
                {nextChapter ? (
                  <span>Next Chapter</span>
                ) : (
                  <span>Last Chapter</span>
                )}
              </LinkButton>
            </div>
          </div>
        )
      }
    </div>
  </div>
</ChapterLayout>
<!-- <script is:inline define:vars={{ prevChapterUrl, nextChapterUrl }}>
  function handleKeyPress(event) {
    if (event.key === "ArrowLeft" && prevChapterUrl) {
      loadPreferences();
      window.location.href = prevChapterUrl;
    } else if (event.key === "ArrowRight" && nextChapterUrl) {
      loadPreferences();
      window.location.href = nextChapterUrl;
    }
  }

  function getCookie(name) {
    const value = `; ${document.cookie}`;
    const parts = value.split(`; ${name}=`);
    if (parts.length === 2) return parts.pop().split(";").shift();
    return null;
  }

  function loadPreferences() {
    const fontSize = getCookie("readerFontSize") || "16";
    const fontWeight = getCookie("readerFontWeight") || "400";
    const fontFamily =
      getCookie("readerFontFamily") || "'IBM Plex Mono', monospace";

    document.documentElement.style.setProperty("--font-size", `${fontSize}px`);
    document.documentElement.style.setProperty("--font-weight", fontWeight);
    document.documentElement.style.setProperty("--font-family", fontFamily);
  }

  loadPreferences();

  document.addEventListener("keydown", handleKeyPress);

  document.addEventListener("astro:before-swap", () => {
    document.removeEventListener("keydown", handleKeyPress);
  });
</script> -->

<style is:global>
  :root {
    --font-size: 16px;
    --font-family: "IBM Plex Mono", monospace;
  }

  .chapter-content {
    font-size: var(--font-size);
    font-weight: var(--font-weight);
    font-family: var(--font-family);
  }
</style>
